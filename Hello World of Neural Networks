First of all we will import required libraries

    import tensorflow as tf
    from tensorflow import keras
    import numpy as np

Now let's use Sequential method of Keras and defines the dimensions.

    model = keras.Sequential([keras.layers.Dense(units = 1, input_size = [1])])

Now let's compile it with optimizer 'STOCHASTIC GRADIENT DESCENT' and loss 'mean_squared_error'

    model.compile(optimizer = 'sgd', loss = 'mean_squared_error')

Now let's define the x and y as 1 dimensional array using numpy.

    x = np.array([-1,0,1,2,3,4,5,6],dtype=float)
    y = np.array([-3,-1,1,3,5,7,9,11],dtype=float)
  
Now let's make our machine understand the relation between x and y.

    model.fit(x, y, epochs = 500)
 
Our machine will guess 500 times the relation between x and y and after each guess it will get closer to the accurate results.
  
    print(model.predict([10]))
    
The accurate answer is 19 but our program will lead to answer 18.97. That's because our input size is very much small, just 8 elements. 

Overall Code is:

import tensorflow as tf
from tensorflow import keras
import numpy as np
model = keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])
model.compile(optimizer='sgd',loss='mean_squared_error')
x = np.array([-1,0,1,2,3,4,5,6],dtype=float)
y = np.array([-3,-1,1,3,5,7,9,11],dtype=float)
model.fit(x, y, epochs=500)
print(model.predict([10]))
